(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var _statesStartScreenJs = require("./states/StartScreen.js");

var _statesStartScreenJs2 = _interopRequireDefault(_statesStartScreenJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.add('startScreen', _statesStartScreenJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs0QkFFaUIsa0JBQWtCOzs7OytCQUNmLHFCQUFxQjs7Ozs0QkFDeEIsa0JBQWtCOzs7O21DQUNYLHlCQUF5Qjs7OztBQUxqRCxJQUFJLElBQUksQ0FBQzs7QUFRVCxNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDMUIsTUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxtQ0FBYyxDQUFDO0FBQzNDLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0NBQzFCLENBQUMiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvU2hvb3RUaGVtVXAvc3JjL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lO1xyXG5cclxuaW1wb3J0IEJvb3QgZnJvbSBcIi4vc3RhdGVzL0Jvb3QuanNcIjtcclxuaW1wb3J0IFByZWxvYWQgZnJvbSBcIi4vc3RhdGVzL1ByZWxvYWQuanNcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcclxuaW1wb3J0IFN0YXJ0U2NyZWVuIGZyb20gXCIuL3N0YXRlcy9TdGFydFNjcmVlbi5qc1wiO1xyXG5cclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICdnYW1lJyk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ2Jvb3QnLCBCb290KTtcclxuICBnYW1lLnN0YXRlLmFkZCgncHJlbG9hZCcsIFByZWxvYWQpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdnYW1lJywgR2FtZSk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3N0YXJ0U2NyZWVuJywgU3RhcnRTY3JlZW4pO1xyXG4gIGdhbWUuc3RhdGUuc3RhcnQoJ2Jvb3QnKTtcclxufTtcclxuIl19
},{"./states/Boot.js":3,"./states/Game.js":4,"./states/Preload.js":5,"./states/StartScreen.js":6}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Player = (function (_Phaser$Sprite) {
	_inherits(Player, _Phaser$Sprite);

	function Player(game, x, y, bullets) {
		_classCallCheck(this, Player);

		_get(Object.getPrototypeOf(Player.prototype), "constructor", this).call(this, game, x, y, 'player', 0);
		this.game = game;
		this.speed = 100;
		this.game.physics.enable(this, Phaser.Physics.ARCADE);
		this.body.drag.x = 35;
		this.body.drag.y = 35;
		this.body.collideWorldBounds = true;
		this.health = { current: 10, max: 10 };

		this.cursors = this.game.input.keyboard.createCursorKeys();
		//this.animations.add("fly", [0,0,1,1,2,2,3,4,5,6,7,8,9,10,10]);
		this._firingConstructor(bullets);
		this._playFly();
	}

	_createClass(Player, [{
		key: "damage",
		value: function damage(amount) {
			this.health.current -= amount;
		}
	}, {
		key: "_firingConstructor",
		value: function _firingConstructor(bullets) {
			this.bulletGate = 1;
			this.shotInterval = 500;
			this.bullets = bullets;
			this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
			this.firePosition = { x: 160, y: 100 };
			//this.fireAnimation = this.animations.add("fire", [11,12,13]);
			//this.fireAnimation.onComplete.add(this._playFly, this);
		}
	}, {
		key: "_playFly",
		value: function _playFly() {
			//this.animations.play("fly", 14, true);
		}
	}, {
		key: "update",
		value: function update() {

			if (this.cursors.left.isDown) {
				this.body.velocity.x = -this.speed;
			}

			if (this.cursors.right.isDown) {
				this.body.velocity.x = this.speed;
			}

			if (this.cursors.up.isDown) {
				this.body.velocity.y = -this.speed;
			}

			if (this.cursors.up.isUp) {
				this.body.velocity.y = this.speed;
			}

			if (this.fireButton.isDown) {
				this.fire();
			}
		}
	}, {
		key: "fire",
		value: function fire() {
			if (this.game.time.now > this.bulletGate) {
				var bullet = this.bullets.getFirstDead();
				if (bullet) {
					bullet.x = this.x + this.firePosition.x;
					bullet.y = this.y + this.firePosition.y;
					bullet.revive();
				} else {
					bullet = this.bullets.create(this.x + this.firePosition.x, this.y + this.firePosition.y, "bullet");
					this.game.physics.enable(bullet, Phaser.Physics.ARCADE);
					bullet.outOfBoundsKill = true;
					bullet.checkWorldBounds = true;
					bullet.body.velocity.x = 250;
				}
				this.bulletGate = this.game.time.now + this.shotInterval;
				this.animations.play("fire");
			}
		}
	}]);

	return Player;
})(Phaser.Sprite);

exports["default"] = Player;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9wcmVmYWJzL1BsYXllci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixNQUFNO1dBQU4sTUFBTTs7QUFDZixVQURTLE1BQU0sQ0FDZCxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUU7d0JBRGIsTUFBTTs7QUFFekIsNkJBRm1CLE1BQU0sNkNBRW5CLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUU7QUFDL0IsTUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDakIsTUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7QUFDakIsTUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RELE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN0QixNQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztBQUNwQyxNQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUM7O0FBRXZDLE1BQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O0FBRTNELE1BQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNqQyxNQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7RUFDaEI7O2NBZm1CLE1BQU07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SSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUN6RCxRQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QjtHQUNEOzs7UUFsRm1CLE1BQU07R0FBUyxNQUFNLENBQUMsTUFBTTs7cUJBQTVCLE1BQU0iLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvU2hvb3RUaGVtVXAvc3JjL3ByZWZhYnMvUGxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIGV4dGVuZHMgUGhhc2VyLlNwcml0ZSB7XG5cdGNvbnN0cnVjdG9yKGdhbWUsIHgsIHksIGJ1bGxldHMpIHtcblx0XHRzdXBlcihnYW1lLCB4LCB5LCAncGxheWVyJywgMCk7XG5cdFx0dGhpcy5nYW1lID0gZ2FtZTtcblx0XHR0aGlzLnNwZWVkID0gMTAwO1xuXHRcdHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZSh0aGlzLCBQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXHRcdHRoaXMuYm9keS5kcmFnLnggPSAzNTtcblx0XHR0aGlzLmJvZHkuZHJhZy55ID0gMzU7XG5cdFx0dGhpcy5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IHRydWU7XG5cdFx0dGhpcy5oZWFsdGggPSB7IGN1cnJlbnQ6IDEwLCBtYXg6IDEwIH07XG5cblx0XHR0aGlzLmN1cnNvcnMgPSB0aGlzLmdhbWUuaW5wdXQua2V5Ym9hcmQuY3JlYXRlQ3Vyc29yS2V5cygpO1xuXHRcdC8vdGhpcy5hbmltYXRpb25zLmFkZChcImZseVwiLCBbMCwwLDEsMSwyLDIsMyw0LDUsNiw3LDgsOSwxMCwxMF0pO1xuXHRcdHRoaXMuX2ZpcmluZ0NvbnN0cnVjdG9yKGJ1bGxldHMpO1xuXHRcdHRoaXMuX3BsYXlGbHkoKTtcblx0fVxuXG5cdGRhbWFnZShhbW91bnQpe1xuXHRcdHRoaXMuaGVhbHRoLmN1cnJlbnQgLT0gYW1vdW50O1xuXHR9XG5cblx0X2ZpcmluZ0NvbnN0cnVjdG9yKGJ1bGxldHMpe1xuXHRcdHRoaXMuYnVsbGV0R2F0ZSA9IDE7XG5cdFx0dGhpcy5zaG90SW50ZXJ2YWwgPSA1MDA7XG5cdFx0dGhpcy5idWxsZXRzID0gYnVsbGV0czsgXG5cdFx0dGhpcy5maXJlQnV0dG9uID0gdGhpcy5nYW1lLmlucHV0LmtleWJvYXJkLmFkZEtleShcblx0XHRcdFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUlxuXHRcdCk7XG5cdFx0dGhpcy5maXJlUG9zaXRpb24gPSB7IHg6IDE2MCwgeTogMTAwIH07XG5cdFx0Ly90aGlzLmZpcmVBbmltYXRpb24gPSB0aGlzLmFuaW1hdGlvbnMuYWRkKFwiZmlyZVwiLCBbMTEsMTIsMTNdKTtcblx0XHQvL3RoaXMuZmlyZUFuaW1hdGlvbi5vbkNvbXBsZXRlLmFkZCh0aGlzLl9wbGF5Rmx5LCB0aGlzKTtcblx0fVxuXG5cdF9wbGF5Rmx5KCl7XG5cdC8vdGhpcy5hbmltYXRpb25zLnBsYXkoXCJmbHlcIiwgMTQsIHRydWUpO1xuXHR9XG5cblx0dXBkYXRlKCl7XG5cblx0XHRpZih0aGlzLmN1cnNvcnMubGVmdC5pc0Rvd24pe1xuXHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnggPSAtdGhpcy5zcGVlZDtcblx0XHR9XG5cblx0XHRpZih0aGlzLmN1cnNvcnMucmlnaHQuaXNEb3duKXtcblx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS54ID0gdGhpcy5zcGVlZDtcblx0XHR9XG5cblx0XHRpZih0aGlzLmN1cnNvcnMudXAuaXNEb3duKXtcblx0XHRcdHRoaXMuYm9keS52ZWxvY2l0eS55ID0gLXRoaXMuc3BlZWQ7XG5cdFx0fVxuXG5cdFx0aWYodGhpcy5jdXJzb3JzLnVwLmlzVXApe1xuXHRcdFx0dGhpcy5ib2R5LnZlbG9jaXR5LnkgPSB0aGlzLnNwZWVkO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuZmlyZUJ1dHRvbi5pc0Rvd24pe1xuXHRcdFx0dGhpcy5maXJlKCk7XG5cdFx0fVxuXHR9XG5cblx0ZmlyZSgpe1xuXHRcdGlmKHRoaXMuZ2FtZS50aW1lLm5vdyA+IHRoaXMuYnVsbGV0R2F0ZSl7XG5cdFx0XHR2YXIgYnVsbGV0ID0gdGhpcy5idWxsZXRzLmdldEZpcnN0RGVhZCgpO1xuXHRcdFx0aWYoYnVsbGV0KXtcblx0XHRcdFx0YnVsbGV0LnggPSB0aGlzLnggKyB0aGlzLmZpcmVQb3NpdGlvbi54O1xuXHRcdFx0XHRidWxsZXQueSA9IHRoaXMueSArIHRoaXMuZmlyZVBvc2l0aW9uLnk7XG5cdFx0XHRcdGJ1bGxldC5yZXZpdmUoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGxldCA9IHRoaXMuYnVsbGV0cy5jcmVhdGUoXG5cdFx0XHRcdFx0dGhpcy54ICsgdGhpcy5maXJlUG9zaXRpb24ueCxcblx0XHRcdFx0XHR0aGlzLnkgKyB0aGlzLmZpcmVQb3NpdGlvbi55LFxuXHRcdFx0XHRcdFwiYnVsbGV0XCJcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5nYW1lLnBoeXNpY3MuZW5hYmxlKGJ1bGxldCxcblx0XHRcdFx0XHRQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuXHRcdFx0XHRidWxsZXQub3V0T2ZCb3VuZHNLaWxsID0gdHJ1ZTtcblx0XHRcdFx0YnVsbGV0LmNoZWNrV29ybGRCb3VuZHMgPSB0cnVlO1xuXHRcdFx0XHRidWxsZXQuYm9keS52ZWxvY2l0eS54ID0gMjUwO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5idWxsZXRHYXRlID0gdGhpcy5nYW1lLnRpbWUubm93ICsgdGhpcy5zaG90SW50ZXJ2YWw7XG5cdFx0XHR0aGlzLmFuaW1hdGlvbnMucGxheShcImZpcmVcIik7XG5cdFx0fVxuXHR9XG59XG4iXX0=
},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9zdGF0ZXMvQm9vdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLElBQUk7V0FBSixJQUFJOzBCQUFKLElBQUk7OztlQUFKLElBQUk7O1dBRWhCLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLCtCQUErQixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHO0FBQ1AsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNoQyxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDbEM7OztTQVRrQixJQUFJOzs7cUJBQUosSUFBSSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9TaG9vdFRoZW1VcC9zcmMvc3RhdGVzL0Jvb3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBCb290IHtcclxuXHJcbiAgcHJlbG9hZCgpIHtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgncHJlbG9hZGVyJywgJ2Fzc2V0cy9pbWFnZXMvbG9hZGluZ19iYXIucG5nJyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGUoKSB7XHJcbiAgICB0aGlzLmdhbWUuaW5wdXQubWF4UG9pbnRlcnMgPSAxO1xyXG4gICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdwcmVsb2FkJyk7XHJcbiAgfVxyXG5cclxufSJdfQ==
},{}],4:[function(require,module,exports){
//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _prefabsPlayerJs = require("../prefabs/Player.js");

var _prefabsPlayerJs2 = _interopRequireDefault(_prefabsPlayerJs);

var Game = (function (_Phaser$State) {
  _inherits(Game, _Phaser$State);

  function Game() {
    _classCallCheck(this, Game);

    //object level properties
    _get(Object.getPrototypeOf(Game.prototype), "constructor", this).call(this);
  }

  _createClass(Game, [{
    key: "create",
    value: function create() {
      this.add.sprite(0, 0, "game_bg");
      var bullets = this.add.group();
      var player = new _prefabsPlayerJs2["default"](this, 100, 100, bullets);
      this.add.existing(player);
    }
  }, {
    key: "update",
    value: function update() {}
  }]);

  return Game;
})(Phaser.State);

exports["default"] = Game;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9zdGF0ZXMvR2FtZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBRW1CLHNCQUFzQjs7OztJQUVwQixJQUFJO1lBQUosSUFBSTs7QUFFWixXQUZRLElBQUksR0FFVDswQkFGSyxJQUFJOzs7QUFJckIsK0JBSmlCLElBQUksNkNBSWI7R0FDVDs7ZUFMa0IsSUFBSTs7V0FPakIsa0JBQUc7QUFDUixVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2pDLFVBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDOUIsVUFBSSxNQUFNLEdBQUcsaUNBQVcsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDakQsVUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDMUI7OztXQUdLLGtCQUFHLEVBQ1I7OztTQWhCa0IsSUFBSTtHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBekIsSUFBSSIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9TaG9vdFRoZW1VcC9zcmMvc3RhdGVzL0dhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL3JlcXVpcmUgb3RoZXIgY29tcG9uZW50c1xyXG5cclxuaW1wb3J0IFBsYXllciBmcm9tIFwiLi4vcHJlZmFicy9QbGF5ZXIuanNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSBleHRlbmRzIFBoYXNlci5TdGF0ZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy9vYmplY3QgbGV2ZWwgcHJvcGVydGllc1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuXHQgIHRoaXMuYWRkLnNwcml0ZSgwLCAwLCBcImdhbWVfYmdcIik7XHJcblx0ICB2YXIgYnVsbGV0cyA9IHRoaXMuYWRkLmdyb3VwKClcclxuXHQgIHZhciBwbGF5ZXIgPSBuZXcgUGxheWVyKHRoaXMsIDEwMCwgMTAwLCBidWxsZXRzKTtcclxuXHQgIHRoaXMuYWRkLmV4aXN0aW5nKHBsYXllcik7XHJcbiAgfVxyXG5cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==
},{"../prefabs/Player.js":2}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      this.load.image('enemy', 'assets/images/enemy.png');
      this.load.image('explosion', 'assets/images/explosion.png');
      this.load.image('player', 'assets/images/gunbot.png', 214, 269);
      this.load.image('bullet', 'assets/images/bullet.png');
      this.load.image('enemyBullet', 'assets/images/enemyBullet.png');
      this.load.image('bg', 'assets/images/bg.jpg');
      this.load.image('health_bar', 'assets/images/health_bar.png');
      this.load.image('circle', 'assets/images/circle.png');
      this.load.image('health_holder', 'assets/images/health_holder.png');

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('startScreen');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLE9BQU87QUFFZixXQUZRLE9BQU8sR0FFWjswQkFGSyxPQUFPOztBQUd4QixRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUNwQjs7ZUFMa0IsT0FBTzs7V0FRbkIsbUJBQUc7QUFDUixVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsOEJBQThCLENBQUMsQ0FBQztLQUMvRDs7O1dBRUssa0JBQUc7OztBQUdQLFVBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7O0FBRW5DLFVBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNoRixVQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDOztBQUVsQyxVQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUM1RCxVQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FBR3ZDLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0FBQ3BELFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0FBQzVELFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEUsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFDdEQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLCtCQUErQixDQUFDLENBQUM7QUFDaEUsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDOUMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7QUFDOUQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLDBCQUEwQixDQUFDLENBQUM7QUFDdEQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLGlDQUFpQyxDQUFDLENBQUM7OztBQUtwRSxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ25COzs7V0FFSyxrQkFBRzs7QUFFUCxVQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDYixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7T0FDdEM7S0FFRjs7O1dBRWEsMEJBQUc7QUFDZixVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztLQUNuQjs7O1NBbERrQixPQUFPOzs7cUJBQVAsT0FBTyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9TaG9vdFRoZW1VcC9zcmMvc3RhdGVzL1ByZWxvYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBQcmVsb2FkIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFzc2V0ID0gbnVsbDtcclxuICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcclxuICB9XHJcbiAgXHJcblxyXG4gIHByZWxvYWQoKSB7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xvYWRpbmdfYmcnLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2JnLmpwZycpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG5cclxuICAgIC8vYmFja2dyb3VuZCBmb3IgZ2FtZVxyXG4gICAgdGhpcy5hZGQuc3ByaXRlKDAsMCwgXCJsb2FkaW5nX2JnXCIpO1xyXG5cclxuICAgIHRoaXMuYXNzZXQgPSB0aGlzLmFkZC5zcHJpdGUodGhpcy5nYW1lLndpZHRoLzIsdGhpcy5nYW1lLmhlaWdodC8yLCAncHJlbG9hZGVyJyk7XHJcbiAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XHJcblxyXG4gICAgdGhpcy5sb2FkLm9uTG9hZENvbXBsZXRlLmFkZE9uY2UodGhpcy5vbkxvYWRDb21wbGV0ZSwgdGhpcyk7XHJcbiAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcclxuXHJcbiAgICAvL2RvIGFsbCB5b3VyIGxvYWRpbmcgaGVyZVxyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdlbmVteScsICdhc3NldHMvaW1hZ2VzL2VuZW15LnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdleHBsb3Npb24nLCAnYXNzZXRzL2ltYWdlcy9leHBsb3Npb24ucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ3BsYXllcicsICdhc3NldHMvaW1hZ2VzL2d1bmJvdC5wbmcnLCAyMTQsIDI2OSk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2J1bGxldCcsICdhc3NldHMvaW1hZ2VzL2J1bGxldC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnZW5lbXlCdWxsZXQnLCAnYXNzZXRzL2ltYWdlcy9lbmVteUJ1bGxldC5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnYmcnLCAnYXNzZXRzL2ltYWdlcy9iZy5qcGcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnaGVhbHRoX2JhcicsICdhc3NldHMvaW1hZ2VzL2hlYWx0aF9iYXIucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2NpcmNsZScsICdhc3NldHMvaW1hZ2VzL2NpcmNsZS5wbmcnKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnaGVhbHRoX2hvbGRlcicsICdhc3NldHMvaW1hZ2VzL2hlYWx0aF9ob2xkZXIucG5nJyk7XHJcblxyXG5cclxuXHJcbiAgICAvL3N0YWFhYXJ0IGxvYWRcclxuICAgIHRoaXMubG9hZC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIGlmKHRoaXMucmVhZHkpIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdzdGFydFNjcmVlbicpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIG9uTG9hZENvbXBsZXRlKCkge1xyXG4gICAgdGhpcy5yZWFkeSA9IHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=
},{}],6:[function(require,module,exports){
//require other components

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StartScreen = (function (_Phaser$State) {
  _inherits(StartScreen, _Phaser$State);

  function StartScreen() {
    _classCallCheck(this, StartScreen);

    //object level properties
    _get(Object.getPrototypeOf(StartScreen.prototype), 'constructor', this).call(this);
  }

  _createClass(StartScreen, [{
    key: 'create',
    value: function create() {}
  }, {
    key: 'update',
    value: function update() {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        this.game.state.start('game');
      }
    }
  }]);

  return StartScreen;
})(Phaser.State);

exports['default'] = StartScreen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL1Nob290VGhlbVVwL3NyYy9zdGF0ZXMvU3RhcnRTY3JlZW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztJQUVxQixXQUFXO1lBQVgsV0FBVzs7QUFFbkIsV0FGUSxXQUFXLEdBRWhCOzBCQUZLLFdBQVc7OztBQUk1QiwrQkFKaUIsV0FBVyw2Q0FJcEI7R0FDVDs7ZUFMa0IsV0FBVzs7V0FPeEIsa0JBQUcsRUFDUjs7O1dBR0ssa0JBQUc7QUFDUixVQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ2pDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDM0IsWUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQzlCO0tBQ0Q7OztTQWhCa0IsV0FBVztHQUFTLE1BQU0sQ0FBQyxLQUFLOztxQkFBaEMsV0FBVyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9TaG9vdFRoZW1VcC9zcmMvc3RhdGVzL1N0YXJ0U2NyZWVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9yZXF1aXJlIG90aGVyIGNvbXBvbmVudHNcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXJ0U2NyZWVuIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gIH1cclxuXHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuXHQgIGlmKHRoaXMuZ2FtZS5pbnB1dC5rZXlib2FyZC5pc0Rvd24oXHJcblx0XHQgIFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpIHtcclxuXHRcdCAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XHJcblx0ICB9XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIl19
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
